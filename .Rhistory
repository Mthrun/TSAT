}
Times2
Times2=c()
for(i in 1:length(Begins)){
Times2=c(Times2,strptime(Begins[[i]][1],format='%Y-%m-%d %H:%M:%S',tz = 'UTC'))
}
Times
Begins
Times2=c()
for(i in 1:length(Begins)){
Times2=c(Times2,strptime(Begins[[i]][1],format='%Y-%m-%d %H:%M:%S',tz = 'UTC'))
Times[i]=strptime(Times[i],format='%Y-%m-%d %H:%M:%S',tz = 'UTC')
}
warnings()
v
Times[i],format='%Y-%m-%d %H:%M:%S',tz = 'UTC')
strptime(Times[i],format='%Y-%m-%d %H:%M:%S',tz = 'UTC')
Times[i]
Times=as.character(raw$timestamp[bmuchangeind])
Times[i]
as.character(raw$timestamp[bmuchangeind])
i
Times3=c()
for(i in 1:length(Begins)){
Times3=c(Times3,(Times[i],format='%Y-%m-%d %H:%M:%S',tz = 'UTC'))
}
Times3=c()
for(i in 1:length(Times)){
Times3=c(Times3,strptime(Times[i],format='%Y-%m-%d %H:%M:%S',tz = 'UTC'))
}
Times3
Times2
length(Times)
length(Begins)
setwd("D:\\Viessmann\\99RawData")
raw=read.csv('BMU Serials changes list.csv')
unique(intersect(header,raw$serial))
bmuchangerawind=match(header,raw$serial)
bmuchangeind=bmuchangerawind[is.finite(bmuchangerawind)]
Times=as.character(raw$timestamp[bmuchangeind])
Times
bmuchangerawind=match(raw$serial,header)
bmuchangeind2=bmuchangerawind[is.finite(bmuchangerawind)]
length(bmuchangeind2)
unique(header)
bmuchangerawind=match(header,raw$serial)
bmuchangeind=bmuchangerawind[is.finite(bmuchangerawind)]
Times=as.character(raw$timestamp[bmuchangeind])
bmuchangerawind2=match(raw$serial,header)
bmuchangerawind2
bmuchangeind2=unique(bmuchangerawind2[is.finite(bmuchangerawind2)])
Begins=BeginningsPerDevice[bmuchangeind2]
Begins
Times=as.list(raw$timestamp[bmuchangeind])
Times
Times2=c()
for(i in 1:length(Begins)){
Times2=c(Times2,strptime(Begins[[i]][1],format='%Y-%m-%d %H:%M:%S',tz = 'UTC'))
}
Times3=c()
for(i in 1:length(Times)){
Times3=c(Times3,strptime(Times[i],format='%Y-%m-%d %H:%M:%S',tz = 'UTC'))
}
Times2
Times3
x=c()
for(i in 1:length(Begins)){
x=c(x,as.numeric(strptime(Times[i],format='%Y-%m-%d %H:%M:%S',tz = 'UTC')-strptime(Begins[[i]][1],format='%Y-%m-%d %H:%M:%S',tz = 'UTC')))
# Times2=c(Times2,strptime(Begins[[i]][1],format='%Y-%m-%d %H:%M:%S',tz = 'UTC'))
}
x
as.numeric(strptime(Times[i],format='%Y-%m-%d %H:%M:%S',tz = 'UTC')-strptime(Begins[[i]][1],format='%Y-%m-%d %H:%M:%S',tz = 'UTC'))
strptime(Times[i],format='%Y-%m-%d %H:%M:%S',tz = 'UTC')
Times[i]
Times[[i]]
Times[[i]][1]
strptime(as.character(Times[i]),format='%Y-%m-%d %H:%M:%S',tz = 'UTC')
as.character(Times[i])
as.character(Times[[i]])
x=c()
for(i in 1:length(Begins)){
x=c(x,as.numeric(strptime(as.character(Times[[i]]),format='%Y-%m-%d %H:%M:%S',tz = 'UTC')-strptime(Begins[[i]][1],format='%Y-%m-%d %H:%M:%S',tz = 'UTC')))
# Times2=c(Times2,strptime(Begins[[i]][1],format='%Y-%m-%d %H:%M:%S',tz = 'UTC'))
}
x
i=1
strptime(as.character(Times[[i]]),format='%Y-%m-%d %H:%M:%S',tz = 'UTC')
strptime(Begins[[i]][1],format='%Y-%m-%d %H:%M:%S',tz = 'UTC'))
strptime(Begins[[i]][1],format='%Y-%m-%d %H:%M:%S',tz = 'UTC')
length(which(x>=0))
y=files[bmuchangeind2]
files[bmuchangeind2]
DurationsPerDevice[bmuchangeind2]
sapply(DurationsPerDevice[bmuchangeind2],sum)
y=sapply(DurationsPerDevice[bmuchangeind2],sum)
repeaired=which(x>=0)
length(repeaired)
cbind(x[repeaired],y[repeaired])
x=c()
for(i in 1:length(Begins)){
x=c(x,as.numeric(strptime(as.character(Times[[i]]),format='%Y-%m-%d %H:%M:%S',tz = 'UTC')-strptime(Begins[[i]][1],format='%Y-%m-%d %H:%M:%S',tz = 'UTC'),units='secs'))
# Times2=c(Times2,strptime(Begins[[i]][1],format='%Y-%m-%d %H:%M:%S',tz = 'UTC'))
}
repeaired=which(x>=0)
length(repeaired)
cbind(x[repeaired],y[repeaired])
dd=cbind(x[repeaired],y[repeaired])
colnames(dd)=c('Seconds After d3 bmu changed','Duration of d3')
dd
dd=cbind(x[repeaired]/60,y[repeaired]/60)
colnames(dd)=c('mins After d3 bmu changed','Duration of d3')
dd
sapply(DurationsPerDevice,length)
which(sapply(DurationsPerDevice,length)>1)
temp=
which(>1)
temp=sapply(DurationsPerDevice,length)
temp
length(temp)
which(temp>1)
DurationsPerDevice[temp]
DurationsPerDevice[which(temp>1)]
DurationsPerDevice[which(temp>1)]/60
3.5*60
206*60
lbls
lices
lices=ClassCount(InrCls)$CountPerClass
lices
ClassCount(Cls$Cls)$CountPerClass
lices=ClassCount(DeviceCLS)$CountPerClass
lices
lbls <- c("C1: shortterm","C2: intermediate","C3: long-term","C4: ambiguous")
pie(lices, labels = lbls, main="Classes C of D3 devices",col = c('blue','red',"green","yellow"))
lices
lices[1]+3
lices[2]+4
lices[3]+7
lices[4]-3-4-7
lbls <- c("C1: shortterm","C2: intermediate","C3: long-term","C4: ambiguous")
pie(lices, labels = lbls, main="Classes C of D3 devices",col = c('blue','red',"green","yellow"))
lices[1]=lices[1]+3
lices[2]=lices[2]+4
lices[3]=lices[3]+7
lices[4]=lices[4]-3-4-7
lbls <- c("C1: shortterm","C2: intermediate","C3: long-term","C4: ambiguous")
pie(lices, labels = lbls, main="Classes C of D3 devices",col = c('blue','red',"green","yellow"))
10^2.327613
10^4.092281
3.5*60
206*60
lices
DurationsPerDevice[which(temp>1)]
bar(unlist(DurationsPerDevice[which(temp>1)]))
bar(slog(unlist(DurationsPerDevice[which(temp>1)])))
newlist=DurationsPerDevice[which(temp>1)]
sernew=files[which(temp>1)]
sernew=files[which(temp>1)]
alltemp=c()
for(i in 1:length(newlist)){
x=newlist[[i]]
names(x)=rep(sernew[i],length(x))
alltemp=c(alltemp,x)
}
bar(slog(alltemp))
DefaultColorSequence
y=c()
for(i in 1:length(newlist)){
x=newlist[[i]]
names(x)=rep(sernew[i],length(x))
alltemp=c(alltemp,x)
temp=rep(DefaultColorSequence[i],length(x))
y=c(y,temp)
}
?bar
?barplot
barplot(slog(alltemp),col=y)
y
newlist=DurationsPerDevice[which(temp>1)]
sernew=header[which(temp>1)]
alltemp=c()
y=c()
for(i in 1:length(newlist)){
x=newlist[[i]]
names(x)=rep(sernew[i],length(x))
alltemp=c(alltemp,x)
temp=rep(DefaultColorSequence[i+20],length(x))
y=c(y,temp)
}
barplot(slog(alltemp),col=y)
temp
DefaultColorSequence[i+20]
newlist=DurationsPerDevice[which(temp>1)]
sernew=header[which(temp>1)]
alltemp=c()
y=c()
for(i in 1:length(newlist)){
x=newlist[[i]]
names(x)=rep(sernew[i],length(x))
alltemp=c(alltemp,x)
temp=rep(DefaultColorSequence(i+20),length(x))
y=c(y,temp)
}
barplot(slog(alltemp),col=y)
DefaultColorSequence(i+20)
DefaultColorSequence[i+20],
DefaultColorSequence[i+20]
DefaultColorSequence[1+20]
DefaultColorSequence[1+19]
DefaultColorSequence
newlist=DurationsPerDevice[which(temp>1)]
sernew=header[which(temp>1)]
alltemp=c()
y=c()
for(i in 1:length(newlist)){
x=newlist[[i]]
names(x)=rep(sernew[i],length(x))
alltemp=c(alltemp,x)
temp=rep(DefaultColorSequence[i],length(x))
y=c(y,temp)
}
barplot(slog(alltemp),col=y)
newlist=DurationsPerDevice[which(temp>1)]
sernew=header[which(temp>1)]
alltemp=c()
y=c()
for(i in 1:length(newlist)){
x=newlist[[i]]
names(x)=rep(sernew[i],length(x))
alltemp=c(alltemp,x)
temp=rep(DefaultColorSequence[i],length(x))
y=c(y,temp)
}
barplot(slog(alltemp),col=y)
slog(alltemp)
length(newlist)
DurationsPerDevice[which(temp>1)]
DurationsPerDevice
which(temp>1)
temp=sapply(DurationsPerDevice,length)
DurationsPerDevice[which(temp>1)]
newlist=DurationsPerDevice[which(temp>1)]
sernew=header[which(temp>1)]
alltemp=c()
y=c()
for(i in 1:length(newlist)){
x=newlist[[i]]
names(x)=rep(sernew[i],length(x))
alltemp=c(alltemp,x)
temp5=rep(DefaultColorSequence[i],length(x))
y=c(y,temp5)
}
barplot(slog(alltemp),col=y)
length(newlist)
temp=sapply(DurationsPerDevice,length)
length(which(temp>1))
barplot(slog(alltemp),col=y,ylab='log_10(Time) in log_10 (secs)',xlab='36 devices shown in different colors with more than one d3 event')
lices
v
sapply(DurationsPerDevice,length)
temp=sapply(DurationsPerDevice,length)
length(temp)
length(temp>1)
sum(temp>1)
ClassCount(DeviceCLS)$CountPerClass
barplot(slog(alltemp),col=y,ylab='log_10(Time) in log_10 (secs)',main='36 devices shown in different colors with more than one d3 event',xlab = 'Event consecutive regarding device and time')
0.15*300
68+168+20
68+168+20/300
(68+168+20)/300
0.18*300
0.15*300
0.13*300
0.12*300
R.Version()
R.Version()
updateDBT()
setwd("D:\\Viessmann\\02Transformierte\\Heatpump")
load(file='DifferenceInHours6.rda')
#load(file='DaueraufschaltzeitDevice.rda')
monthkey=c('Jan','Feb' , 'Mar' , 'Apr' , 'May' , 'Jun' , 'Jul' , 'Aug' , 'Sep' , 'Oct' , 'Nov' , 'Dec')
DevicelyDauerUeberAchtStunden=list()
DevicelySum=matrix(NaN,ncol = 12,nrow = length(Serial))
DevicelyCounts=matrix(NaN,ncol = 12,nrow = length(Serial))
for(i in 1:length(Serial)){
dtparts = BeginningTime[[i]]
dates=sapply(strsplit(as.character(dtparts), " "), "[[", 1)
#daytimes=sapply(strsplit(as.character(dtparts), " "), "[[", 2)
requireRpackage('chron')
timeobject=chron(dates=dates,format=c('y-m-d'))
m=months(timeobject, abbreviate = TRUE)
tmp=DifferencePerDevice[[i]]
MonthlyData=list()
for(k in 1:length(monthkey)){
tmp2=c()
# j=1
ind=m==monthkey[k]
# while(m[j]==monthkey[k]){
#   tmp2=c(tmp2,tmp[j])
#   j=j+1
# }
tmp2=tmp[ind]-8
if(length(ind)>0)
if(sum(tmp2,na.rm = T)>31*24)
warning(paste(Serial[i],k,max(tmp),'\n'))
MonthlyData=c(MonthlyData,list(tmp2[tmp2>0]))
}
MonthlyDataSum=sapply(MonthlyData,sum,na.rm=T)
MonthlyDataCounts=sapply(MonthlyData,length)
DevicelySum[i,]=MonthlyDataSum
DevicelyCounts[i,]=MonthlyDataCounts
DevicelyDauerUeberAchtStunden=c(DevicelyDauerUeberAchtStunden,MonthlyData)
}
DevicelySum
max(DevicelySum)
source('D:/Viessmann/04FinishedFunctions/TimeSeries/R/FourierFilter.R', echo=TRUE)
?seq
?polyfit
source('D:/Viessmann/04FinishedFunctions/TimeSeries/R/FourierFilter.R', echo=TRUE)
?fft
InDir="D:/Viessmann/09Originale"
V=ReadLRN('temp_ktsDataErrorD3',InDir)
plot(V$Data)
plot(V$Data,type='l')
FourierFilter(V$Data)
source('D:/Viessmann/04FinishedFunctions/TimeSeries/R/FourierFilter.R', echo=TRUE)
FourierFilter(V$Data)
seq(from=10,to=1,by=1)
seq(from=10,to=1,by=-1)
source('D:/Viessmann/04FinishedFunctions/TimeSeries/R/FourierFilter.R', echo=TRUE)
FourierFilter(V$Data)
?Real
?Re
?ifft
??ifft
?fft
source('D:/Viessmann/04FinishedFunctions/TimeSeries/R/FourierFilter.R', echo=TRUE)
FourierFilter(V$Data)
???IFFT
??IFFT
source('D:/Viessmann/04FinishedFunctions/TimeSeries/R/FourierFilter.R', echo=TRUE)
FourierFilter(V$Data)
FourierFilter(V$Data,AdaptAmp = F)
FourierFilter(V$Data,AdaptAmp = F)
source('D:/Viessmann/04FinishedFunctions/TimeSeries/R/FourierFilter.R', echo=TRUE)
source('D:/Viessmann/04FinishedFunctions/TimeSeries/R/FourierFilter.R', echo=TRUE)
FourierFilter(V$Data,AdaptAmp = F)
source('D:/Viessmann/04FinishedFunctions/TimeSeries/R/FourierFilter.R', echo=TRUE)
FourierFilter(V$Data,AdaptAmp = F)
is.nab(V$Data)
is.nan(V$Data)
is.nab(V$Data[,1])
is.nan(V$Data[,1])
sum(is.nan(V$Data[,1]))
plot(V$Data[,1])
plot(V$Data[,2])
sum(is.nan(V$Data[,]))
sum(is.nan(V$Data[,2]))
FourierFilter(V$Data[,2],AdaptAmp = F)
FourierFilter(V$Data[,2],AdaptAmp = F)
source('D:/Viessmann/04FinishedFunctions/TimeSeries/R/FourierFilter.R', echo=TRUE)
FourierFilter(V$Data[,2],AdaptAmp = F)
plot(FourierFilter(V$Data[,2],AdaptAmp = F))
plot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.05))
plot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.05),type = 'l')
plot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.005),type = 'l')
plot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.2),type = 'l')
plot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.02),type = 'l')
plot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.02)-(V$Data[,2],type = 'l')
plot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.02)-V$Data[,2],type = 'l')
plot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.02),type = 'l')
plot(V$Data[,2],type = 'l')
plot(FourierFilter(V$Data[,2],AdaptAmp = T,largest = 0.02),type = 'l')
source('D:/Viessmann/04FinishedFunctions/TimeSeries/R/FourierFilter.R', echo=TRUE)
plot(FourierFilter(V$Data[,2],AdaptAmp = T,largest = 0.02),type = 'l')
plot(FourierFilter(V$Data[,2],AdaptAmp = T,largest = 0.02),type = 'l')
plot(V$Data[,2],type = 'l')
plot(FourierFilter(V$Data[,2],AdaptAmp = T,largest = 0.02),type = 'l')
plot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.02),type = 'l')
plot(V$Data[,2],type = 'l')
plot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.02)+5,type = 'l')
plot(V$Data[,2],type = 'l')
plot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.02)+3,type = 'l')
plot(V$Data[,2],type = 'l')
plot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.02)+3-V$Data[,2],type = 'l')
PDEplot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.02))
PDEplot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.2))
PDEplot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.2)-V$Data[,2])
PDEplot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.02)-V$Data[,2])
PDEplot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 1)-V$Data[,2])
plot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 1)-V$Data[,2])
PDEplot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 1)-V$Data[,2])
PDEplot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.5)-V$Data[,2])
PDEplot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.9)-V$Data[,2])
PDEplot(FourierFilter(V$Data[,2],AdaptAmp = F,largest = 0.99-V$Data[,2])
PDEplot(FourierFilter(V$Data[,2],AdaptAmp = F,CountOrPercent = 20)-V$Data[,2])
PDEplot(FourierFilter(V$Data[,2],AdaptAmp = F,CountOrPercent = 10)-V$Data[,2])
plot(FourierFilter(V$Data[,2],AdaptAmp = F,CountOrPercent = 10)-V$Data[,2])
plot(FourierFilter(V$Data[,2],AdaptAmp = F,CountOrPercent = 0.1)-V$Data[,2])
PDEplot(FourierFilter(V$Data[,2],AdaptAmp = F,CountOrPercent = 0.1)-V$Data[,2])
PDEplot(FourierFilter(V$Data[,2],AdaptAmp = F,CountOrPercent = 0.01)-V$Data[,2])
plot(FourierFilter(V$Data[,2],AdaptAmp = F,CountOrPercent = 0.01))
plot(FourierFilter(V$Data[,2],AdaptAmp = F,CountOrPercent = 0.01),type = 'l')
plot(V$Data[,2],type = 'l')
plot(FourierFilter(V$Data[,2],AdaptAmp = T,CountOrPercent = 0.01),type = 'l')
20+1:length(c(1,2,3,4,5,6,7))]
20+1:length(c(1,2,3,4,5,6,7))
source('D:/Viessmann/04FinishedFunctions/TimeSeries/R/FourierFilter.R', echo=TRUE)
plot(FourierFilter(V$Data[,2],AdaptAmp = T,CountOrPercent = 0.01,largest = F),type = 'l')
plot(FourierFilter(V$Data[,2],AdaptAmp = F,CountOrPercent = 0.01,largest = F),type = 'l')
plot(FourierFilter(V$Data[,2],AdaptAmp = F,CountOrPercent = 0.01,largest = T),type = 'l')
plot(V$Data[,2],type = 'l')
install.packages("ProjectedBasedClustering")
install.packages("ProjectionBasedClustering")
updateDBT()
TimeSeries::FourierFilter
?TimeSeries::FourierFilter
Data=V$Data[,2]
Mirrored  = c(Data,Data[seq(from=length(Data),to=1,by=-1)])
Data  = c(Mirrored, Mirrored[seq(from=length(Mirrored),to=1,by=-1)])
plot(Data)
plot(Data,type = 'l')
plot(V$Data[,2],type = 'l')
updatedbt()
updateDBT()
?FourierFilter
installDBTDependencies()
installDBTDependencies()
source('D:/Subversion/PUB/dbt/TimeSeries/R/EventDurationAndTimeDifference.R', echo=TRUE)
CrossCorr
Directory="D:\\Viessmann\\99RawData\\d3_v4_toR"
files=list.files(Directory,pattern='.csv')
header=as.numeric(sub(".csv", "", files))
source('D:/Viessmann/04FinishedFunctions/ReadCSV_python.R')
V=list()
for(i in 1:3)
V[[i]]=ReadCSV_python(files[i],Directory)
V[[3]]$Time
Directory="D:\\Viessmann\\99RawData\\d3_v4_toR"
files=list.files(Directory,pattern='.csv')
header=as.numeric(sub(".csv", "", files))
source('D:/Viessmann/04FinishedFunctions/ReadCSV_python.R')
V=list()
for(i in 1:4)
V[[i]]=ReadCSV_python(files[i],Directory)
V[[4]]$Time
Directory="D:\\Viessmann\\99RawData\\d3_v4_toR"
files=list.files(Directory,pattern='.csv')
header=as.numeric(sub(".csv", "", files))
source('D:/Viessmann/04FinishedFunctions/ReadCSV_python.R')
V=list()
for(i in 1:5)
V[[i]]=ReadCSV_python(files[i],Directory)
Time=V[[5]]$Time
years(Time)
?years
??years
dates=sapply(strsplit(BeginningTime, split), "[[", 1)
daytimes=sapply(strsplit(BeginningTime, split), "[[", 2)
y=chron::chron(dates=dates,times=daytimes,format=format)
chron::years(y)
BeginningTime=Time
Time
dates=sapply(strsplit(BeginningTime, split), "[[", 1)
daytimes=sapply(strsplit(BeginningTime, split), "[[", 2)
y=chron::chron(dates=dates,times=daytimes,format=format)
chron::years(y)
format=c('y-m-d','h:m:s');split=" ";
dates=sapply(strsplit(BeginningTime, split), "[[", 1)
daytimes=sapply(strsplit(BeginningTime, split), "[[", 2)
y=chron::chron(dates=dates,times=daytimes,format=format)
chron::years(y)
BeginningTime=as.character(Time)
dates=sapply(strsplit(BeginningTime, split), "[[", 1)
daytimes=sapply(strsplit(BeginningTime, split), "[[", 2)
y=chron::chron(dates=dates,times=daytimes,format=format)
chron::years(y)
dates=sapply(strsplit(BeginningTime, split), "[[", 1)
daytimes=sapply(strsplit(BeginningTime, split), "[[", 2)
y=chron::chron(dates=dates,times=daytimes,format=format)
as.numeric(chron::years(y))
Testanlagen=c(7571381763278107, 7571381629973206, 7571381712345101, 7571381763330101)
Directory="D:\\Viessmann\\99RawData\\Heatpump\\perdevice"
files=list.files(Directory,pattern='.csv')
Serial=sub(".csv", "", files)
i=1
HeatpumpList[[i]]=ReadCSV_python(files[i],Directory)
HeatpumpList=list()
source('D:/Viessmann/04FinishedFunctions/ReadCSV_python.R')
HeatpumpList=list()
HeatpumpList[[i]]=ReadCSV_python(files[i],Directory)
source('D:/Subversion/PUB/dbt/TimeSeries/R/SplitYears.R', echo=TRUE)
SplitYears(HeatpumpList[[i]]$Time)
Time(HeatpumpList[[i]]$Time
Time=HeatpumpList[[i]]$Time
Time
SplitYears(as.character(Time))
test=SplitYears(as.character(Time))
Time[length(Time)]
source('D:/Subversion/PUB/dbt/TimeSeries/R/SplitYears.R', echo=TRUE)
test=SplitYears(as.character(Time))
source('D:/Subversion/PUB/dbt/TimeSeries/R/SplitYears.R', echo=TRUE)
test=SplitYears(as.character(Time))
source('D:/Subversion/PUB/dbt/TimeSeries/R/SplitYears.R', echo=TRUE)
test=SplitYears(as.character(Time))
source('D:/Subversion/PUB/dbt/TimeSeries/R/SplitYears.R', echo=TRUE)
test=SplitTime(as.character(Time))
test=SplitTime(as.character(Time),Resolution = 'months')
source('D:/Subversion/PUB/dbt/TimeSeries/R/EventCounts.R', echo=TRUE)
source('D:/Subversion/PUB/dbt/TimeSeries/R/EventCounts.R', echo=TRUE)
source('D:/Subversion/PUB/dbt/TimeSeries/R/EventCounts.R', echo=TRUE)
source('D:/Subversion/PUB/dbt/TimeSeries/R/EventCounts.R', echo=TRUE)
