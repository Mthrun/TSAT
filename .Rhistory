fanPlot(BadData[,15],ClassCount(BadData[,15])$UniqueClasses,c(Header,'Anomalies'),main = 'Later-Defects Vitocall 300A tests')
fanPlot(BadData[indNotDupliB,15],ClassCount(BadData[,15])$UniqueClasses,c(Header,'Anomalies'),main = 'Later-Defects Vitocall 300A devices')
fanPlot(BadData[indNotDupliB,7],c(0,1),c('Fail','Pass'),main = 'Later-Defects Vitocall 300A devices',col = c('red','blue'),ShrinkPies = 0.2)
nrow(DataBadList$Data)
indNotDupliB=!duplicated(BadData[,6],fromLast=T)
fanPlot(BadData[indNotDupliB,5],ReelvantMaterialsNo,main = 'Later-Defects Vitocall 300A devices')
x=unique(BadData[indNotDupliB,1])
fanPlot(BadData[indNotDupliB,1],x,paste(x,'Mehrfachprüfungen'),main = 'Later-Defects Vitocall 300A devices',ShrinkPies = 0.05)
fanPlot(BadData[indNotDupliB,7],c(0,1),c('Fail','Pass'),main = 'Later-Defects Vitocall 300A devices',col = c('red','blue'),ShrinkPies = 0.2)
fanPlot(BadData[indNotDupliB,7],c(0,1),c('Fail','Pass'),main = 'Later-Defects Vitocall 300A devices',col = c('red','blue'),ShrinkPies = 0.2)
Header=VFehler$Header
Header[3]='Sauggasueberhitzung'
fanPlot(BadData[,15],ClassCount(BadData[,15])$UniqueClasses,c(Header,'Anomalies'),main = 'Later-Defects Vitocall 300A tests')
fanPlot(BadData[indNotDupliB,15],ClassCount(BadData[,15])$UniqueClasses,c(Header,'Anomalies'),main = 'Later-Defects Vitocall 300A devices')
DataBadList=ReadLRN('NoNFunctioningVitocall300A')
BadData=DataBadList$Data[DataBadList$Data[,3]==3,]
DataBadList$Header
#19 EOL material numbers seperated anamolies
path='D:/Viessmann/02Transformierte/EOL'
setwd(path)
DataGoodList=ReadLRN('FunctioningVitocall300A')
DataGoodList$Header
indgood=intersect(intersect(which(DataGoodList$Data[,1]==0),which(DataGoodList$Data[,7]==1)),which(DataGoodList$Data[,3]==3))
str(indgood)
indgood=intersect(which(DataGoodList$Data[,1]==0),which(DataGoodList$Data[,7]==1))
str(indgood)
DataBadList=ReadLRN('NoNFunctioningVitocall300A')
BadData=DataBadList$Data[DataBadList$Data[,3]==3,]
DataBadList$Header
ind=intersect(which(BadData[,1]==0),which(BadData[,15]<5))
)
ind2
#19 EOL material numbers seperated anamolies
path='D:/Viessmann/02Transformierte/EOL'
setwd(path)
DataGoodList=ReadLRN('FunctioningVitocall300A')
DataGoodList$Header
indgood=intersect(intersect(which(DataGoodList$Data[,1]==0),which(DataGoodList$Data[,7]==1)),which(DataGoodList$Data[,3]==3))
str(indgood)
indgood=intersect(which(DataGoodList$Data[,1]==0),which(DataGoodList$Data[,7]==1))
str(indgood)
DataBadList=ReadLRN('NoNFunctioningVitocall300A')
BadData=DataBadList$Data[DataBadList$Data[,3]==3,]
DataBadList$Header
ind=intersect(which(BadData[,1]==0),which(BadData[,15]<5))
ind2=which(BadData[,1]>=1)
str(ind2)
BadData[ind2,15]
ClassCount(BadData[,15])
BadData=BadData[ind,]
Counts=c()
i=14
plot=PDEplot(BadData[,i],color = 'red')$ggPlot
print('Bad devices')
unique(BadData[,5])
Counts=c(Counts,sum(is.finite(BadData[,i])))
indgood=intersect(intersect(which(DataGoodList$Data[,1]==0),which(DataGoodList$Data[,7]==1)),which(DataGoodList$Data[,3]==2))
DataGoodALL1=DataGoodList$Data[indgood,i]
x=PDEplot(DataGoodALL1,ggPlot = plot)$ggPlot
Counts=c(Counts,sum(is.finite(DataGoodALL1)))
print('Good Devices')
unique(DataGoodList$Data[indgood,5])
tmp=DataGoodList$Data[,5] %in% c(7567146, 7567147, 7567148, 7783526, 7783524)
DataGoodALLM2=DataGoodList$Data[tmp,]
indgood=intersect(which(DataGoodALLM2[,1]==0),which(DataGoodALLM2[,7]==1))
DataGoodALL=DataGoodALLM2[indgood,i]
x=PDEplot(DataGoodALL,ggPlot = x,color = 'green')$ggPlot
Counts=c(Counts,sum(is.finite(DataGoodALL)))
x+xlim(2590, 2770)
print('MayBe Problematic Devices')
unique(DataGoodALLM2[indgood,5])
DataBadList=ReadLRN('NoNFunctioningVitocall300A')
BadData=DataBadList$Data[DataBadList$Data[,3]==3,]
DataBadList$Header
ind=intersect(which(BadData[,1]==0),which(BadData[,15]<5))
ind2=which(BadData[,1]>=0)
BadData[ind2,15]
ClassCount(BadData[,15])
BadData=BadData[ind,]
Counts=c()
i=14
plot=PDEplot(BadData[,i],color = 'red')$ggPlot
print('Bad devices')
unique(BadData[,5])
Counts=c(Counts,sum(is.finite(BadData[,i])))
indgood=intersect(intersect(which(DataGoodList$Data[,1]==0),which(DataGoodList$Data[,7]==1)),which(DataGoodList$Data[,3]==2))
DataGoodALL1=DataGoodList$Data[indgood,i]
x=PDEplot(DataGoodALL1,ggPlot = plot)$ggPlot
Counts=c(Counts,sum(is.finite(DataGoodALL1)))
print('Good Devices')
unique(DataGoodList$Data[indgood,5])
tmp=DataGoodList$Data[,5] %in% c(7567146, 7567147, 7567148, 7783526, 7783524)
DataGoodALLM2=DataGoodList$Data[tmp,]
indgood=intersect(which(DataGoodALLM2[,1]==0),which(DataGoodALLM2[,7]==1))
DataGoodALL=DataGoodALLM2[indgood,i]
x=PDEplot(DataGoodALL,ggPlot = x,color = 'green')$ggPlot
Counts=c(Counts,sum(is.finite(DataGoodALL)))
x+xlim(2590, 2770)
print('MayBe Problematic Devices')
unique(DataGoodALLM2[indgood,5])
ind2
fanPlot(BadData[,5],ReelvantMaterialsNo,main = 'Later-Defects Vitocall 300A tests',Rline = 1.1)
ReelvantMaterialsNo=c(
7549500,
7525808,
7525809,
7571567,
7569399,
7569400,
7567146,
7567147,
7567148,
7783524,
7783525,
7783526
)
fanPlot(BadData[,5],ReelvantMaterialsNo,main = 'Later-Defects Vitocall 300A tests',Rline = 1.1)
source('D:/Subversion/PUB/dbt/DataVisualizations/R/fanPlot.R', echo=TRUE)
fanPlot(BadData[,5],ReelvantMaterialsNo,main = 'Later-Defects Vitocall 300A tests',Rline = 1.1)
indNotDupliB=!duplicated(BadData[,6],fromLast=T)
fanPlot(BadData[indNotDupliB,5],ReelvantMaterialsNo,main = 'Later-Defects Vitocall 300A devices')
x=unique(BadData[indNotDupliB,1])
fanPlot(BadData[indNotDupliB,1],x,paste(x,'Mehrfachprüfungen'),main = 'Later-Defects Vitocall 300A devices',ShrinkPies = 0.05)
fanPlot(BadData[indNotDupliB,7],c(0,1),c('Fail','Pass'),main = 'Later-Defects Vitocall 300A devices',col = c('red','blue'),ShrinkPies = 0.2)
fanPlot(BadData[indNotDupliB,1],x,paste(x,'Mehrfachprüfungen'),main = 'Later-Defects Vitocall 300A devices',ShrinkPies = 0.05)
5*4/12
path='D:/Viessmann/02Transformierte/EOL'
setwd(path)
DataBadList=ReadLRN('NoNFunctioningVitocall300A')
BadData=DataBadList$Data
fanPlot(BadData[,5],ReelvantMaterialsNo,main = 'Later-Defects Vitocall 300A tests',Rline = 1.1)
ReelvantMaterialsNo=c(
7549500,
7525808,
7525809,
7571567,
7569399,
7569400,
7567146,
7567147,
7567148,
7783524,
7783525,
7783526
)
fanPlot(Data[,5],ReelvantMaterialsNo,main = 'Vitocall 300A tests')
x=unique(Data[,1])
fanPlot(Data[,1],x,paste(x,'Mehrfachprüfungen'),main = 'Vitocall 300A tests')
fanPlot(BadData[,5],ReelvantMaterialsNo,main = 'Later-Defects Vitocall 300A tests',Rline = 1.1)
x=unique(BadData[,1])
fanPlot(BadData[,1],x,paste(x,'Mehrfachprüfungen'),main = 'Later-Defects Vitocall 300A tests',ShrinkPies = 0.05)
fanPlot(BadData[,7],c(0,1),c('Fail','Pass'),main = 'Later-Defects Vitocall 300A tests',col = c('red','blue'),ShrinkPies = 0.2,Rline = 1.0)
source('D:/Viessmann/08AnalyseProgramme/19EOL_MatNo_SearchForAnomalies.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Subversion/PUB/dbt/DataVisualizations/R/fanPlot.R', echo=TRUE)
path='D:/Viessmann/02Transformierte/EOL'
setwd(path)
DataBadList=ReadLRN('NoNFunctioningVitocall300A')
BadData=DataBadList$Data
fanPlot(BadData[,7],c(0,1),c('Fail','Pass'),main = 'Later-Defects Vitocall 300A tests',col = c('red','blue'),ShrinkPies = 0.2,Rline = 1.0)
indNotDupliB=!duplicated(BadData[,6],fromLast=T)
fanPlot(BadData[indNotDupliB,5],ReelvantMaterialsNo,main = 'Later-Defects Vitocall 300A devices')
x=unique(BadData[indNotDupliB,1])
fanPlot(BadData[indNotDupliB,1],x,paste(x,'Mehrfachprüfungen'),main = 'Later-Defects Vitocall 300A devices',ShrinkPies = 0.05)
fanPlot(BadData[indNotDupliB,7],c(0,1),c('Fail','Pass'),main = 'Later-Defects Vitocall 300A devices',col = c('red','blue'),ShrinkPies = 0.2)
VFehler=ReadLRN('Fehlerquote_Vitocal_300_Alle','D:/Viessmann/09Originale/EOL')
VFehler$Header
DataBadList$Header
Header=VFehler$Header
Header[3]='Sauggasueberhitzung'
fanPlot(BadData[,15],ClassCount(BadData[,15])$UniqueClasses,c(Header,'Anomalies'),main = 'Later-Defects Vitocall 300A tests')
fanPlot(BadData[indNotDupliB,15],ClassCount(BadData[,15])$UniqueClasses,c(Header,'Anomalies'),main = 'Later-Defects Vitocall 300A devices')
Bd2=BadData[indNotDupliB,]
ClassCount(BadData[,15]))
ClassCount(BadData[,15]))
ClassCount(BadData[,15])
Header
fanPlot(Bd2[which(BadData[,15]==3),5],ReelvantMaterialsNo,main = 'Later-Defects Vitocall 300A devices')
which(BadData[,15]==3)
Bd2=BadData[indNotDupliB,]
fanPlot(Bd2[which(BadData[,15]==3),5],ReelvantMaterialsNo,main = 'Later-Defects Vitocall 300A devices')
fanPlot(Bd2[which(Bd2[,15]==3),5],ReelvantMaterialsNo,main = 'Later-Defects Vitocall 300A devices')
fanPlot(Data[indNotDupli,7],c(0,1),c('Fail','Pass'),main = 'Vitocall 300A devices',col = c('red','blue'))
path='D:/Viessmann/09Originale/EOL/'
#path='D:/Viessmann/99RawData/EOL/2015'
setwd(path)
V=ReadLRN('EOLdataV2')
V$Header
V$Comments
ReelvantMaterialsNo=c(
7549500,
7525808,
7525809,
7571567,
7569399,
7569400,
7567146,
7567147,
7567148,
7783524,
7783525,
7783526
)
setdiff(y=intersect(ReelvantMaterialsNo,V$Data[,5]),x = ReelvantMaterialsNo)
indMatch=V$Data[,5] %in% ReelvantMaterialsNo
sum(indMatch)
Data=V$Data[indMatch,]
V$Header
Key=V$Key[indMatch]
duplicated(Data[,6],fromLast=T)[1:22]
duplicated(Data[,6],fromLast=F)[1:22]
as.character(Data[1:22,6])
indNotDupli=!duplicated(Data[,6],fromLast=T)
# count=c()
# for(i in 1:length(ReelvantMaterialsNo))
#   count[i]=length(which(Data[,5]==ReelvantMaterialsNo[i]))
#
# labels=as.character(ReelvantMaterialsNo)
# ind=which(count>0)
# count=count[ind]
# labels=labels[ind]
# requireRpackage('plotrix')
# #requireRpackage('RColorBrewer')
#
# pct=round((count/sum(count))*100,2)
# pct
# n=length(Data[,5])
# labels=paste0(labels,': ',pct,"%")
# colors=DefaultColorSequence[1:length(labels)]#brewer.pal(length(ReelvantMaterialsNo),"YlOrBr")
# fan.plot(pct,labels=labels,col=colors,max.span=pi,align="left",main=paste(n,"Devices"),include.sumx=F,shrink=0.05)
fanPlot(Data[,5],ReelvantMaterialsNo,main = 'Vitocall 300A tests')
x=unique(Data[,1])
fanPlot(Data[,1],x,paste(x,'Mehrfachprüfungen'),main = 'Vitocall 300A tests')
fanPlot(Data[,7],c(0,1),c('Fail','Pass'),main = 'Vitocall 300A tests',col = c('red','blue'))
fanPlot(Data[indNotDupli,5],ReelvantMaterialsNo,main = 'Vitocall 300A devices')
x=unique(Data[indNotDupli,1])
fanPlot(Data[indNotDupli,1],x,paste(x,'Mehrfachprüfungen'),main = 'Vitocall 300A devices')
fanPlot(Data[indNotDupli,7],c(0,1),c('Fail','Pass'),main = 'Vitocall 300A devices',col = c('red','blue'))
#19 EOL material numbers seperated anamolies
path='D:/Viessmann/02Transformierte/EOL'
setwd(path)
DataGoodList=ReadLRN('FunctioningVitocall300A')
DataGoodList$Header
indgood=intersect(intersect(which(DataGoodList$Data[,1]==0),which(DataGoodList$Data[,7]==1)),which(DataGoodList$Data[,3]==3))
str(indgood)
indgood=intersect(which(DataGoodList$Data[,1]==0),which(DataGoodList$Data[,7]==1))
str(indgood)
DataBadList=ReadLRN('NoNFunctioningVitocall300A')
BadData=DataBadList$Data[DataBadList$Data[,3]==3,]
DataBadList$Header
ind=intersect(which(BadData[,1]==0),which(BadData[,15]<5))
ind2=which(BadData[,1]>=1)
BadData[ind2,15]
ClassCount(BadData[,15])
BadData=BadData[ind,]
fanPlot(BadData[,5],ReelvantMaterialsNo,main = 'Later-Defects Vitocall 300A devices, one time tested')
fanPlot(Data[indNotDupli,7],c(0,1),c('Fail','Pass'),main = 'Vitocall 300A devices',col = c('red','blue'))
DataFail=Data[Data[indNotDupli,7]==0,]
1776*0.0175
View(DataFail)
Data[indNotDupli,7]
DataFail=Data[indNotDupli,7,]
DataFail=Data[indNotDupli,7]
DataFail=Data[indNotDupli,]
DataFail=DataFail[DataFail[,7]==0,]
indNotDupli=!duplicated(Data[,6],fromLast=T)
DataFail=Data[indNotDupli,]
DataFail=DataFail[DataFail[,7]==0,]
fanPlot(DataFail[,5],ReelvantMaterialsNo,main = 'Total Defects Vitocall 300A devices',Rline = 1.1)
DataFail[,6]
write.csv(file = 'TotalDefects',DataFail[,6])
getwd()
path='D:/Viessmann/99RawData/EOL/TS'
setwd(path)
files=list.files(pattern=".csv",include.dirs=T,recursive=T)
i=1
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T)
colnames(Raw)
dummy=list()
for(i in 1:length(files)){
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T)
string=colnames(Raw)
dummy=c(dummy,string)
}
str(dummy)
dummy=list()
for(i in 1:length(files)){
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T)
string=colnames(Raw)
dummy=c(dummy,list(string))
}
Raw$Zeit.Datum[1]
date(Raw$Zeit.Datum[1])
TimeTmp=strptime(as.character(Raw$Zeit.Datum[1]),format='%d.%m.%Y %H:%M:%S',tz = "Europe/Berlin")
TimeTmp
date(TimeTmp)
TimeTmp=strptime(as.character(Raw$Zeit.Datum[1]),format='%d.%m.%Y %H:%M:%S',tz = "Europe/Berlin")
date(TimeTmp)
?date
?strptime
?posix
?POSIXct
Dates(TimeTmp)
dates(TimeTmp)
as.Date(TimeTmp)
dummy=list()
for(i in 1:length(files)){
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T)
string=colnames(Raw)
TimeTmp=strptime(as.character(Raw$Zeit.Datum[1]),format='%d.%m.%Y %H:%M:%S',tz = "Europe/Berlin")
dummy=c(dummy,list(c(as.Date(TimeTmp),string)))
}
i
i=163
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T)
string=colnames(Raw)
files[i]
path='D:/Viessmann/99RawData/EOL/TS'
setwd(path)
files=list.files(pattern=".csv",include.dirs=T,recursive=T)
dummy=list()
for(i in 1:length(files)){
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T)
string=colnames(Raw)
TimeTmp=strptime(as.character(Raw$Zeit.Datum[1]),format='%d.%m.%Y %H:%M:%S',tz = "Europe/Berlin")
dummy=c(dummy,list(c(as.Date(TimeTmp),string)))
}
i
files[1841]
dummy=list()
times=c()
for(i in 1:length(files)){
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T)
string=colnames(Raw)
TimeTmp=strptime(as.character(Raw$Zeit.Datum[1]),format='%d.%m.%Y %H:%M:%S',tz = "Europe/Berlin")
times=c(times,as.character(as.Date(TimeTmp)))
dummy=c(dummy,list(string))
}
i
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T)
?read.csv
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T,row.names = NULL)
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T,row.names = 2)
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T,row.names = FALSE)
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T,row.names = "missing")
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T,row.names = "automatic")
str(Raw)
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T,row.names = 1:3169)
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T,row.names = 5)
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T,row.names = NULL)
i
string=colnames(Raw)
string
string=colnames(Raw)[-1]
string
TimeTmp=strptime(as.character(Raw$row.names[1]),format='%d.%m.%Y %H:%M:%S',tz = "Europe/Berlin")
v
TimeTmp
dummy=list()
times=c()
for(i in 1:length(files)){
Raw=read.csv(files[i],sep = ';',header = T,dec = ',' ,quote = "\"",comment.char = "",stringsAsFactors = FALSE,check.names = T,fill=T,row.names = NULL)
string=colnames(Raw)[-1]
TimeTmp=strptime(as.character(Raw$row.names[1]),format='%d.%m.%Y %H:%M:%S',tz = "Europe/Berlin")
times=c(times,as.character(as.Date(TimeTmp)))
dummy=c(dummy,list(string))
}
str(times)
times
length(times)
i
unique(sapply(dummy,length))
Cols=matrix(NaN,nrow = 1,ncols=50)
Cols=matrix(NaN,nrow = 1,ncol=50)
length(dummy[[i]])
as.vector(dummy[[i]])
Cols=matrix(NaN,nrow = 1,ncol=51)
mode(Cols)="character"
for(i in 1:length(files)){
matrix[1,i]=files[i]
m=length(dummy[[i]])
matrix[2:m+1]=as.vector(dummy[[i]])
}
v
files[i]
matrix[1,i]=files[i]
as.character(files[i])
matrix[1,i]=as.character(files[i])
matrix[1,i]
i
matrix[1,1]
matrix
Cols=matrix(NaN,nrow = 1,ncol=51)
mode(Cols)="character"
for(i in 1:length(files)){
Cols[1,i]=as.character(files[i])
m=length(dummy[[i]])
Cols[2:m+1]=as.vector(dummy[[i]])
}
i
m
Cols[1,i]=as.character(files[i])
as.character(files[i])
Cols[1,i]
Cols
Cols=matrix(NaN,nrow = length(files),ncol=51)
mode(Cols)="character"
for(i in 1:length(files)){
Cols[1,i]=as.character(files[i])
m=length(dummy[[i]])
Cols[2:m+1]=as.vector(dummy[[i]])
}
i
Cols=matrix(NaN,nrow = length(files),ncol=51)
mode(Cols)="character"
for(i in 1:length(files)){
Cols[1,i]=as.character(files[i])
m=length(dummy[[i]])
Cols[2:m+1,i]=as.vector(dummy[[i]])
}
i
2:m+1
length(2:m+19
)
length(2:m+1)
m
Cols[2:m+2,i]=as.vector(dummy[[i]])
length(as.vector(dummy[[i]]))
length(2:m+2)
length(2:m+3)
m
Cols=matrix(NaN,nrow = length(files),ncol=51)
mode(Cols)="character"
for(i in 1:length(files)){
Cols[1,i]=as.character(files[i])
m=length(dummy[[i]])
Cols[2:m+3,i]=as.vector(dummy[[i]])
}
i
Cols=matrix(NaN,nrow = length(files),ncol=51)
mode(Cols)="character"
for(i in 1:length(files)){
Cols[1,i]=as.character(files[i])
m=length(dummy[[i]])
Cols[2:(m+1),i]=as.vector(dummy[[i]])
}
i
m
v
matrix
Cols
View(Cols)
Cols=matrix(NaN,nrow = length(files),ncol=51)
mode(Cols)="character"
for(i in 1:length(files)){
Cols[i,1]=as.character(files[i])
m=length(dummy[[i]])
Cols[i,2:(m+1)]=as.vector(dummy[[i]])
}
View(Cols)
Cols2=Cos[,2:51]
Cols2=Cols[,2:51]
rownames(Cols2)=Cos1[,1]
rownames(Cols2)=Cols1[,1]
rownames(Cols2)=Cols[,1]
ind=!duplicated.matrix(Cols2)
sum(ind)
Cols3=Cols2[ind,]
View(Cols3)
View(Cols)
write.csv(file='ColnamesTS',x = Cols3)
getwd()
install.packages("DatabionicSwarm")
install.packages("DatabionicSwarm")
data('irias')
data('iris')
str(iris)
Pswarm(iris)
viterbi
vline
?abline
source('D:/Subversion/PUB/dbt/TimeSeries/R/HiddenMarkovModel.R', echo=TRUE)
relDiff4Prices
ugarchspec
??ugarchspec
requireRpackage('rugarch')
?ugarchforecast
?arima
source('D:/Subversion/PUB/dbt/TimeSeries/R/autoCompoundModel.R', echo=TRUE)
source('D:/Subversion/PUB/dbt/TimeSeries/R/HiddenMarkovModel.R', echo=TRUE)
GenerateRegularTS
source('D:/Subversion/PUB/dbt/TimeSeries/R/autoARIMA.R', echo=TRUE)
requireNamespace('Rhmm')
requireNamespace('RHmm')
?simulated
requireNamespace('forecast')
?simulated
??simulated
requireNamespace('fanplot')
?simulated
?simulate
AnalysisOfClassifier
source('D:/Subversion/PUB/dbt/TimeSeries/R/EventTimeFilter.R')
source('D:/Subversion/PUB/dbt/TimeSeries/R/EventTimeFilter.R')
source('D:/Subversion/PUB/dbt/TimeSeries/R/EventTimeFilter.R')
sapply(c( 'waveslim' 'WaveletComp' 'tswge' 'TSdist'),FUN=requireRpackage())
sapply(c('waveslim','WaveletComp','tswge','TSdist'),FUN=requireRpackage())
sapply(c('waveslim','WaveletComp','tswge','TSdist'),FUN=requireRpackage
)
source('D:/Subversion/PUB/dbt/TimeSeries/R/EventDurationAndTimeDifference.R')
source('D:/Subversion/PUB/dbt/TimeSeries/R/EventDurationAndTimeDifference.R')
updateDBT()
updateDBT()
