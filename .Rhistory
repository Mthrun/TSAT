ForecastPeriods = 4,PlotIt = T,
Holidays = Holidays)
dailyres$Accuracy
dailyres=autoCompoundModel(DataFrame = Calls,TimeColumnName ='Time' ,
FeatureName = 'Calls',SplitDataAt = 1820,Frequency = 'day',
ForecastPeriods = 1,PlotIt = T,
Holidays = Holidays)
dailyres=autoCompoundModel(DataFrame = Calls,TimeColumnName ='Time' ,
FeatureName = 'Calls',SplitDataAt = 1820,Frequency = 'day',
ForecastPeriods = 2,PlotIt = T,
Holidays = Holidays)
dailyres=autoCompoundModel(DataFrame = Calls,TimeColumnName ='Time' ,
FeatureName = 'Calls',SplitDataAt = 1820,Frequency = 'day',
ForecastPeriods = 3,PlotIt = T,
Holidays = Holidays)
dailyres=autoCompoundModel(DataFrame = Calls,TimeColumnName ='Time' ,
FeatureName = 'Calls',SplitDataAt = 1820,Frequency = 'day',
ForecastPeriods = 4,PlotIt = T,
Holidays = Holidays)
dailyres=autoCompoundModel(DataFrame = Calls,TimeColumnName ='Time' ,
FeatureName = 'Calls',SplitDataAt = 1800,Frequency = 'day',
ForecastPeriods = 4,PlotIt = T,
Holidays = Holidays)
dailyres=autoCompoundModel(DataFrame = Calls,TimeColumnName ='Time' ,
FeatureName = 'Calls',SplitDataAt = 1822,Frequency = 'day',
ForecastPeriods = 4,PlotIt = T,
Holidays = Holidays)
dailyres$Accuracy
source('D:/Subversion/PUB/dbt/TimeSeries/R/WaveletFilter.R')
res=WaveletFilter(Calls$Calls,percent = '12.5')
library(waveslim)
res=WaveletFilter(Calls$Calls,percent = '12.5')
res=WaveletFilter(Calls$Calls,percent = '50')
source('D:/Subversion/PUB/dbt/TimeSeries/R/WaveletFilter.R')
res=WaveletFilter(Calls$Calls,percent = '50')
plot(res)
plot(res)
plot(res[[1]])
res=WaveletFilter(Calls$Calls,percent = '25')
res=WaveletFilter(Calls$Calls,percent = '6.25')
res=WaveletFilter(Calls$Calls,percent = '50')
res=WaveletFilter(Calls$Calls[1:1700],percent = '50')
coeffs=res[[2]]
test=Calls$Calls[1701:1826]
WaveletDecompositionVector <- dwpt(test, 'haar', 1)
timeSeries.basis <- basis(WaveletDecompositionVector, c("w1.0"))
str(coeffs)
for(i in 1:length(coeffs))
WaveletDecompositionVector[[i]] <- timeSeries.basis[i] * coeffs[[i]]
FilteredTS <- idwpt(WaveletDecompositionVector, timeSeries.basis)
points(FilteredTS,col='red')
?`DataIO-package`
?`DatabionicSwarm-package`
projection=Pswarm(FCPS$Hepta$Data,Cls=FCPS$Hepta$Cls,PlotIt=T)
visualization=GeneratePswarmVisualization(Data = FCPS$Hepta$Data,
projection$ProjectedPoints,projection$LC)
Imx = GeneralizedUmatrix::interactiveGeneralizedUmatrixIsland(visualization$Umatrix,
visualization$Bestmatches,Cls)
Imx = GeneralizedUmatrix::interactiveGeneralizedUmatrixIsland(visualization$Umatrix,
visualization$Bestmatch)
Imx = ProjectionBasedClustering::interactiveGeneralizedUmatrixIsland(visualization$Umatrix,
visualization$Bestmatch)
GeneralizedUmatrix::plotTopographicMap(visualization$Umatrix,
visualization$Bestmatches, Cls=Cls,Imx = Imx)
GeneralizedUmatrix::plotTopographicMap(visualization$Umatrix,
visualization$Bestmatches,Imx = Imx)
Cls=DBSclustering(k=7,FCPS$Hepta$Data,
visualization$Bestmatches, visualization$LC,PlotIt=FALSE)
GeneralizedUmatrix::plotTopographicMap(visualization$Umatrix,
visualization$Bestmatches, Cls=Cls,Imx = Imx)
GeneralizedUmatrix::plotTopographicMap(visualization$Umatrix,
visualization$Bestmatches, Cls=Cls,Imx = Imx,BmSize = 2)
library(TimeSeries)
require(prophet)
require(forecast)
#loading data
setwd("D:/Viessmann2018Q2/99RawData/Anrufvolumen")
load(file='CompoundModel.rda') #CompoundModel,TestAndTrain,Verification,Holidays)
##Verification
#prepare data
testandtrainforprophet <- data.frame(ds = as.Date(TestAndTrain$Time),
y = TestAndTrain$Calls)
#build model with settings found in test and train
m <- prophet::prophet(testandtrainforprophet,holidays=Holidays,
seasonality.prior.scale = best_paramsRMSE$seasonality_prior_scale,
changepoint.prior.scale = best_paramsRMSE$changepoint_prior_scale,
holidays.prior.scale = best_paramsRMSE$holidays_prior_scale,
daily.seasonality=best_paramsRMSE$daily_seasonality,yearly.seasonality=best_paramsRMSE$yearly_seasonality)
#forecast for timeframe of verification
future=prophet::make_future_dataframe(m, periods = nrow(Verification), freq = 'day')
forecast <- predict(m, future)
#accuracy
AccuracyVerification=forecast::accuracy(forecast[as.Date(forecast$ds) %in% as.Date(Verification$Time), 'yhat'], Verification$Calls)
AccuracyVerification
#visualized
plot(forecast[as.Date(forecast$ds) %in% as.Date(Verification$Time), 'ds'],forecast[as.Date(forecast$ds) %in% as.Date(Verification$Time), 'yhat'],type='l',
xlab='Time',ylab='Calls',main='Prediction (black), Verification data (red)')
points(Verification$Time,Verification$Calls,col='red')
require(prophet)
require(forecast)
#loading data
setwd("D:/Viessmann2018Q2/99RawData/Anrufvolumen")
load(file='CompoundModel.rda') #CompoundModel,TestAndTrain,Verification,Holidays)
##Verification
#prepare data
testandtrainforprophet <- data.frame(ds = as.Date(TestAndTrain$Time),
y = TestAndTrain$Calls)
## Von Grundprinzip sollte das hier gehen
#prophet::fit.prophet(CompoundModel$Model, data.frame(ds=as.Date(Verification$Time),y=Verification$Calls))
#error: Prophet object can only be fit once. Instantiate a new object.
#Workaround
#build model with settings found in test and train
m <- prophet::prophet(testandtrainforprophet,holidays=Holidays,
seasonality.prior.scale = best_paramsRMSE$seasonality_prior_scale,
changepoint.prior.scale = best_paramsRMSE$changepoint_prior_scale,
holidays.prior.scale = best_paramsRMSE$holidays_prior_scale,
daily.seasonality=best_paramsRMSE$daily_seasonality,yearly.seasonality=best_paramsRMSE$yearly_seasonality)
#forecast for timeframe of verification
future=prophet::make_future_dataframe(m, periods = nrow(Verification), freq = 'day')
forecast <- predict(m, future)
#accuracy
AccuracyVerification=forecast::accuracy(forecast[as.Date(forecast$ds) %in% as.Date(Verification$Time), 'yhat'], Verification$Calls)
AccuracyVerification
#visualized
plot(forecast[as.Date(forecast$ds) %in% as.Date(Verification$Time), 'ds'],forecast[as.Date(forecast$ds) %in% as.Date(Verification$Time), 'yhat'],type='l',
xlab='Time',ylab='Calls',main='Prediction (black), Verification data (red)')
points(Verification$Time,Verification$Calls,col='red')
library(TimeSeries)
library(TimeSeries)
?isoweek
??isoweek
library(TimeSeries)
library(TimeSeries)
library(TimeSeries)
library(TimeSeries)
library(TimeSeries)
library(TimeSeries)
library(TSAT)
library(TSAT)
library(TSAT)
library(TSAT)
source('D:/Subversion/PUB/dbt/TimeSeries/R/PlotTimeSeries.R', echo=TRUE)
library(TSAT)
library(TSAT)
library(TSAT)
path2='D:/Viessmann2018Q2/99RawData/Anrufvolumen'
setwd(path2)
name='day_characteristics.csv'
holsraw=read.csv(name,sep = ',',header = T,stringsAsFactors = F)
HolisDes=holsraw$Feiertag
indTB=holsraw$first_day_after_long_weekend
TimeHolidays=data.frame(Time=strptime(holsraw$Datum,format = '%Y-%m-%d',tz = 'UTC')[indTB==0],Des=HolisDes[indTB==0],stringsAsFactors=F)
str(TimeHolidays)
View(TimeHolidays)
Holidays=TimeHolidays[Overlap$Des!="",]
Holidays=TimeHolidays[TimeHolidays$Des!="",]
View(Holidays)
?read.csv
holsraw=read.csv(name,sep = ',',header = T,stringsAsFactors = F,fileEncoding = 'UTF-8')
HolisDes=holsraw$Feiertag
indTB=holsraw$first_day_after_long_weekend
TimeHolidays=data.frame(Time=strptime(holsraw$Datum,format = '%Y-%m-%d',tz = 'UTC')[indTB==0],Des=HolisDes[indTB==0],stringsAsFactors=F)
Holidays=TimeHolidays[TimeHolidays$Des!="",]
View(Holidays)
Holidays$Des=sub(pattern = 'ä',replacement = 'ae',Holidays$Des)
View(holidays)
View(Holidays)
Holidays=TimeHolidays[TimeHolidays$Des!="",]
Holidays$Des=sub(pattern = 'ä',replacement = 'ae',Holidays$Des)
Holidays$Des=sub(pattern = 'Ä',replacement = 'Ae',Holidays$Des)
Holidays$Des=sub(pattern = 'ö',replacement = 'oe',Holidays$Des)
Holidays$Des=sub(pattern = 'Ö',replacement = 'Oe',Holidays$Des)
Holidays$Des=sub(pattern = 'ü',replacement = 'ue',Holidays$Des)
Holidays$Des=sub(pattern = 'Ü',replacement = 'Ue',Holidays$Des)
Holidays$Des=sub(pattern = '?',replacement = 'ss',Holidays$Des)
colnames(Holidays)
colnames(Holidays)=c('Time','Description')
GermanHolidays=Holidays
View(GermanHolidays)
path2='D:/Viessmann2018Q2/99RawData/Anrufvolumen'
setwd(path2)
name='day_characteristics.csv'
holsraw=read.csv(name,sep = ',',header = T,stringsAsFactors = F,fileEncoding = 'UTF-8')
HolisDes=holsraw$Feiertag
indTB=holsraw$first_day_after_long_weekend
TimeHolidays=data.frame(Time=strptime(holsraw$Datum,format = '%Y-%m-%d',tz = 'UTC')[indTB==0],Des=HolisDes[indTB==0],stringsAsFactors=F)
Holidays=TimeHolidays[TimeHolidays$Des!="",]
Holidays$Des=sub(pattern = 'ä',replacement = 'ae',Holidays$Des)
Holidays$Des=sub(pattern = 'Ä',replacement = 'Ae',Holidays$Des)
Holidays$Des=sub(pattern = 'ö',replacement = 'oe',Holidays$Des)
Holidays$Des=sub(pattern = 'Ö',replacement = 'Oe',Holidays$Des)
Holidays$Des=sub(pattern = 'ü',replacement = 'ue',Holidays$Des)
Holidays$Des=sub(pattern = 'Ü',replacement = 'Ue',Holidays$Des)
Holidays$Des=sub(pattern = 'ß',replacement = 'ss',Holidays$Des)
colnames(Holidays)=c('Time','Description')
GermanHolidays=Holidays
View(GermanHolidays)
save('GermanHolidays.rda',GermanHolidays,compress = 'xz')
save(file='GermanHolidays.rda',GermanHolidays,compress = 'xz')
getwd()
min(GermanHolidays)
min(GermanHolidays$Time)
max("1988-01-01 UTC")
max(GermanHolidays$Time)
str(GermanHolidays)
library(TSAT)
source('D:/Subversion/PUB/dbt/TimeSeries/R/FilterHolidays.R', echo=TRUE)
?as.Date
source('D:/Subversion/PUB/dbt/TimeSeries/R/FilterHolidays.R', echo=TRUE)
library(TSAT)
library(TSAT)
library(TSAT)
source('D:/Subversion/PUB/dbt/TimeSeries/R/FilterHolidays.R', echo=TRUE)
is.null(NULL)
is.null(c(1,2,3))
library(TSAT)
library(TSAT)
library(TSAT)
library(TSAT)
library(TSAT)
library(TSAT)
matrix(c(1, 1, 2, 2), 2, 2)
matrix(c(1, 2, 1, 2), 2, 2)
setwd('D:/PhoneRouting/td_phone_routing/Data/09Originale')
load(file='WetterDeutschlandProTag.rda')#,DailyWeather
setwd('D:/PhoneRouting/td_phone_routing/02Transformierte')
DataFrame=read.table('AggregatedRelevantIssuesPerDay.csv',sep ="\t",na = 'NaN',header = T)
DataFrame$Time=as.Date(DataFrame$Time)
Full=merge(DataFrame,DailyWeather,by.x='Time',by.y='Time')
WeekKey=TSAT::FilterWeekdays(Full$Time,Full$Key)
InWeekData=merge(Full,WeekKey,by.x='Key',by.y='FilteredData')
TSAT::PlotTimeSeries(InWeekData$Time,InWeekData$CallsAsIssues)
out=FilterHolidays(InWeekData$Time,InWeekData$CallsAsIssues)
TSAT::PlotTimeSeries(out$FilteredTime,out$FilteredData)
InWeekData=merge(out,Full,by.x='FilteredTime',by.y='Time')
TSAT::PlotTimeSeries(InWeekData$FilteredTime,InWeekData$CallsAsIssues)
TSAT::PlotTimeSeries(InWeekData$FilteredTime,InWeekData$Temperature)
plot(InWeekData$CallsAsIssues,InWeekData$Temperature)
ccf=CrossCorr(InWeekData$CallsAsIssues,InWeekData$Temperature,120,T)
min(ccf$acf)
Temperature=TSAT::aggregateDays2Weeks(InWeekData$FilteredTime,InWeekData$Temperature,mean)
CallsAsIssues=TSAT::aggregateDays2Weeks(InWeekData$FilteredTime,InWeekData$CallsAsIssues,sum)
ccf=CrossCorr(Temperature$Data,CallsAsIssues$Data,120,T)
min(ccf$acf)
PlotTimeSeries(CallsAsIssues$Time,CallsAsIssues$Data)
GeneralizedLinearModels4TS(CallsAsIssues$Data,70,Temperature$Data,Time = Temperature$Time,PlotIt = T)
source('D:/Subversion/PUB/dbt/TimeSeries/R/GeneralizedLinearModels4TS.R', echo=TRUE)
GeneralizedLinearModels4TS(CallsAsIssues$Data,70,Temperature$Data,Time = Temperature$Time,PlotIt = T)
source('D:/Subversion/PUB/dbt/TimeSeries/R/plotEvaluationFilteredTS.R', echo=TRUE)
GeneralizedLinearModels4TS(CallsAsIssues$Data,70,Temperature$Data,Time = Temperature$Time,PlotIt = T)
source('D:/Subversion/PUB/dbt/TimeSeries/R/plotEvaluationFilteredTS.R', echo=TRUE)
source('D:/Subversion/PUB/dbt/TimeSeries/R/GeneralizedLinearModels4TS.R', echo=TRUE)
GeneralizedLinearModels4TS(CallsAsIssues$Data,70,Temperature$Data,Time = Temperature$Time,PlotIt = T)
source('D:/Subversion/PUB/dbt/TimeSeries/R/plotEvaluationFilteredTS.R', echo=TRUE)
source('D:/Subversion/PUB/dbt/TimeSeries/R/GeneralizedLinearModels4TS.R', echo=TRUE)
source('D:/Subversion/PUB/dbt/TimeSeries/R/plotEvaluationFilteredTS.R', echo=TRUE)
GeneralizedLinearModels4TS(CallsAsIssues$Data,70,Temperature$Data,Time = Temperature$Time,PlotIt = T)
source('D:/Subversion/PUB/dbt/TimeSeries/R/plotEvaluationFilteredTS.R', echo=TRUE)
GeneralizedLinearModels4TS(CallsAsIssues$Data,70,Temperature$Data,Time = Temperature$Time,PlotIt = T)
source('D:/Subversion/PUB/dbt/TimeSeries/R/plotEvaluationFilteredTS.R', echo=TRUE)
GeneralizedLinearModels4TS(CallsAsIssues$Data,70,Temperature$Data,Time = Temperature$Time,PlotIt = T)
?tswge::kalman.wge
data(table10.1.signal)
data(table10.1.noise)
spn=table10.1.signal+table10.1.noise
kalman.wge(y=spn,start=0,gam0=1,F=.9,gamV=1,G=1,gamW=.75)
library(tswge)
data(table10.1.signal)
data(table10.1.noise)
spn=table10.1.signal+table10.1.noise
kalman.wge(y=spn,start=0,gam0=1,F=.9,gamV=1,G=1,gamW=.75)
x=kalman.wge(y=spn,start=0,gam0=1,F=.9,gamV=1,G=1,gamW=.75)
colnames(x)
x[,"Data"]
spn
str(spn)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(spn)
kalman.wge
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(spn)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(spn)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(spn)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(spn)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(spn)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(spn)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(spn)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(spn)
tswge::data(table10.1.signal)
data(tswge::table10.1.signal)
require(tswge)
data(table10.1.signal)
data(table10.1.noise)
spn=table10.1.signal+table10.1.noise
KalmanFilter(y=spn,PlotIt=TRUE,Short=FALSE)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
require(tswge)
data(table10.1.signal)
data(table10.1.noise)
spn=table10.1.signal+table10.1.noise
KalmanFilter(Datavector=spn,PlotIt=TRUE,Short=FALSE)
install.packages("dlm")
m1.dlm <- dlm(FF = 1, V = 0.8, GG = 1, W = 0.1, m0 = 0, C0 = 100)
library(dlm)
m1.dlm <- dlm(FF = 1, V = 0.8, GG = 1, W = 0.1, m0 = 0, C0 = 100)
dlmFilter(CallsAsIssues$Data,m1.dlm)
out=dlmFilter(CallsAsIssues$Data,m1.dlm)
?dlmFilter
source('D:/Subversion/PUB/dbt/TimeSeries/R/plotEvaluationFilteredTS.R', echo=TRUE)
plotEvaluationFilteredTS(1:96,CallsAsIssues$Data,out$m[2:97])
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(CallsAsIssues)
KalmanFilter(CallsAsIssues$Data)
KalmanFilter(CallsAsIssues$Data,PlotIt = T)
KalmanFilter(CallsAsIssues$Data,PlotIt = T,Short = T)
source('D:/Subversion/PUB/dbt/TimeSeries/R/plotEvaluationFilteredTS.R', echo=TRUE)
KalmanFilter(CallsAsIssues$Data,PlotIt = T,Short = T)
str(m1.dlm)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(CallsAsIssues$Data,PlotIt = T,Short = T)
KalmanFilter(CallsAsIssues$Data,PlotIt = T,Short = F)
?dlm::dlm
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(CallsAsIssues$Data,PlotIt = T,Short = F)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(CallsAsIssues$Data,PlotIt = T,Short = F)
KalmanFilter(CallsAsIssues$Data,PlotIt = T,Short = T)
meanrobust()
meanrobust
stdrobust()
stdrobust
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(CallsAsIssues$Data,PlotIt = T,Short = T)
?dlmMLE
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
parsKalmanFilter(CallsAsIssues$Data,PlotIt = T,Short = T)
pars=KalmanFilter(CallsAsIssues$Data,PlotIt = T,Short = T)
test=dlmMLE(CallsAsIssues$Data,rep(0,6),KalmanFilter)
dlmMLE(CallsAsIssues$Data,rep(0,6),KalmanFilter)
dlmMLE(CallsAsIssues$Data,rep(0,6),pars)
build=function(x) {    m0=mean(Datavector, trim = 0.1, na.rm = TRUE); #roboust mean
s0=stdrobust(Datavector);return(list(FF = 1, V = 0.8, GG = 1, W = 0.1, m0 = m0, C0 = s0))}
dlmMLE(CallsAsIssues$Data,list(FF = 1, V = 0.8, GG = 1, W = 0.1, m0 = 0, C0 = 1),build)
build=function(Datavector) {    m0=mean(Datavector, trim = 0.1, na.rm = TRUE); #roboust mean
s0=stdrobust(Datavector);return(list(FF = 1, V = 0.8, GG = 1, W = 0.1, m0 = m0, C0 = s0))}
dlmMLE(CallsAsIssues$Data,list(FF = 1, V = 0.8, GG = 1, W = 0.1, m0 = 0, C0 = 1),build)
dlmMLE(CallsAsIssues$Data,c(FF = 1, V = 0.8, GG = 1, W = 0.1, m0 = 0, C0 = 1),build)
dlmMLE(CallsAsIssues$Data,c(1, 0.8, 1, 0.1, 0, 1),build)
c(1, 0.8, 1, 0.1, 0, 1
)
build=function(Datavector) {    m0=mean(Datavector, trim = 0.1, na.rm = TRUE); #roboust mean
s0=stdrobust(Datavector);return(list(FF = 1, V = 0.8, GG = 1, W = 0.1, m0 = m0, C0 = s0))}
build(CallsAsIssues$Data)
build=function(Datavector) {    m0=mean(Datavector, trim = 0.1, na.rm = TRUE); #roboust mean
s0=stdrobust(Datavector);return(list(FF = 1, V = 0.8, GG = 1, W = 0.1, m0 = m0, C0 = as.numeric(s0)))}
build(CallsAsIssues$Data)
dlmMLE(CallsAsIssues$Data,c(1, 0.8, 1, 0.1, 0, 1),build)
dlmMLE(CallsAsIssues$Data,c(1, 0.8, 1, 0.1, 0, 1),build,debug = T)
dlmMLE(CallsAsIssues$Data,c(1, 0.8, 1, 0.1, 0, 1),build,debug = F)
pars=dlmMLE(CallsAsIssues$Data,c(1, 0.8, 1, 0.1, 0, 1),build,debug = T)
KalmanFilter(CallsAsIssues$Data,pars$par,PlotIt = T,Short = T)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(CallsAsIssues$Data,pars$par,PlotIt = T,Short = T)
KalmanFilter(CallsAsIssues$Data,pars$par,PlotIt = T,Short = T)
KalmanFilter(CallsAsIssues$Data,pars,PlotIt = T,Short = T)
str(pars)
KalmanFilter(CallsAsIssues$Data,pars$par,PlotIt = T,Short = T)
KalmanFilter(CallsAsIssues$Data,list(pars$par),PlotIt = T,Short = T)
a=pars$par
a
KalmanFilter(CallsAsIssues$Data,dlm(FF =  11462.170, V = 9465.104, GG = 11462.170, W = 2467.554, m0 =  1466.088 , C0 = 11462.170),PlotIt = T,Short = T)
KalmanFilter(CallsAsIssues$Data,dlm(FF =  11462.170, V = 9465.104, GG = 11462.170, W = 2467.554, m0 =  1466.088 , C0 = 11462.170),PlotIt = T,Short = F)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(CallsAsIssues$Data,dlm(FF =  11462.170, V = 9465.104, GG = 11462.170, W = 2467.554, m0 =  1466.088 , C0 = 11462.170),PlotIt = T,Short = F)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(CallsAsIssues$Data,dlm(FF =  11462.170, V = 9465.104, GG = 11462.170, W = 2467.554, m0 =  1466.088 , C0 = 11462.170),PlotIt = T,Short = F)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(CallsAsIssues$Data,dlm(FF =  11462.170, V = 9465.104, GG = 11462.170, W = 2467.554, m0 =  1466.088 , C0 = 11462.170),PlotIt = T,Short = F)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(CallsAsIssues$Data,dlm(FF =  11462.170, V = 9465.104, GG = 11462.170, W = 2467.554, m0 =  1466.088 , C0 = 11462.170),PlotIt = T,Short = F)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(CallsAsIssues$Data)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(CallsAsIssues$Data)
source('D:/Subversion/PUB/dbt/TimeSeries/R/KalmanFilter.R', echo=TRUE)
KalmanFilter(CallsAsIssues$Data)
source('D:/Subversion/PUB/dbt/TimeSeries/R/FilterHolidays.R', echo=TRUE)
library(TSAT)
library(TSAT)
?grangertest
??grangertest
library(TSAT)
library(TSAT)
?vars::causality
?GrangerCausalityTest
library(TSAT)
library(MTS)
?Eccm
#VARIMAaufCallsUndTemp
require(TSAT)
forecastdays=14
outpath='D:/PhoneRouting/td_phone_routing/data/02Transformierte/forecast'
#Daten laden
setwd('D:/PhoneRouting/td_phone_routing/data/09Originale')
load(file='DailyWeather1950Until2018.rda')#,DailyMinWeather,DailyMedianWeather)
DailyMedianWeather$Time=as.Date(DailyMedianWeather$Time)
setwd('D:/PhoneRouting/td_phone_routing/data/09Originale')
DataFrame=read.table('daily_data_20130401_20180716_no_skills.csv',sep =";",na = 'NaN',header = T)
DataFrame$Time=as.Date(DataFrame$timestamp)
#Preprocessing
DailyMedianWeather$AverageM=apply(DailyMedianWeather[2:5],1,mean) # vorerst simpler mittelwert
Full=merge(DataFrame,DailyMedianWeather,by.x='Time',by.y='Time')
Full$Time=as.Date(Full$Time)
Full$Key=1:nrow(Full)
setwd('D:/PhoneRouting/td_phone_routing/data/09Originale')
load(file='AbsatPerDay.rda')#,AbsatzPerDay)
sum(is.na(MatchToSkill$Skill))/length(MatchToSkill$Skill)
AbsatzAll=rowSums(AbsatzPerDay[,2:ncol(AbsatzPerDay)])
setwd('D:/PhoneRouting/td_phone_routing/data/09Originale')
DataFrame=read.table('daily_data_20130401_20180716_no_skills.csv',sep =";",na = 'NaN',header = T)
DataFrame$Time=as.Date(DataFrame$timestamp)
Absatz=data.frame(Absatz=AbsatzAll,Time=as.Date(AbsatzPerDay[,1]))
Full=merge(Full,Absatz,'Time','Time')
colnames(Full)
Data=as.matrix(Full[,c(8,17,19)])
Eccm(Data)
Eccm(Data,6,6)
?diffM
?diff
??adfTest
??adfTest
source('D:/Subversion/PUB/dbt/TimeSeries/R/CointegrationOfTwoTS.R')
source('D:/Subversion/PUB/dbt/TimeSeries/R/CointegrationOfTwoTS.R')
#VARIMAaufCallsUndTemp
require(TSAT)
forecastdays=14
outpath='D:/PhoneRouting/td_phone_routing/data/02Transformierte/forecast'
#Daten laden
setwd('D:/PhoneRouting/td_phone_routing/data/09Originale')
load(file='DailyWeather1950Until2018.rda')#,DailyMinWeather,DailyMedianWeather)
DailyMedianWeather$Time=as.Date(DailyMedianWeather$Time)
setwd('D:/PhoneRouting/td_phone_routing/data/09Originale')
DataFrame=read.table('daily_data_20130401_20180716_no_skills.csv',sep =";",na = 'NaN',header = T)
DataFrame$Time=as.Date(DataFrame$timestamp)
#Preprocessing
DailyMedianWeather$AverageM=apply(DailyMedianWeather[2:5],1,mean) # vorerst simpler mittelwert
Full=merge(DataFrame,DailyMedianWeather,by.x='Time',by.y='Time')
Full$Time=as.Date(Full$Time)
Full$Key=1:nrow(Full)
setwd('D:/PhoneRouting/td_phone_routing/data/09Originale')
load(file='AbsatPerDay.rda')#,AbsatzPerDay)
sum(is.na(MatchToSkill$Skill))/length(MatchToSkill$Skill)
AbsatzAll=rowSums(AbsatzPerDay[,2:ncol(AbsatzPerDay)])
setwd('D:/PhoneRouting/td_phone_routing/data/09Originale')
DataFrame=read.table('daily_data_20130401_20180716_no_skills.csv',sep =";",na = 'NaN',header = T)
DataFrame$Time=as.Date(DataFrame$timestamp)
Absatz=data.frame(Absatz=AbsatzAll,Time=as.Date(AbsatzPerDay[,1]))
Full=merge(Full,Absatz,'Time','Time')
colnames(Full)
Data=as.matrix(Full[,c(8,17,19)])
#install.packages('MTS')
CointegrationOfTwoTS(Data[,1],Data[,2])
source('D:/Subversion/PUB/dbt/TimeSeries/R/CointegrationOfTwoTS.R')
CointegrationOfTwoTS(Data[,1],Data[,2])
CointegrationOfTwoTS(Data[,1],Data[,3])
?tseries
??tseries
library(tseries)
con <- url("https://finance.yahoo.com")
close(con)
x <- get.hist.quote(instrument = "^gspc", start = "1998-01-01",
quote = "Close")
plot(x)
x <- get.hist.quote(instrument = "ibm", quote = c("Cl", "Vol"))
plot(x, main = "International Business Machines Corp")
spc <- get.hist.quote(instrument = "^gspc", start = "1998-01-01",
quote = "Close")
ibm <- get.hist.quote(instrument = "ibm",  start = "1998-01-01",
quote = "Adj")
require("zoo") # For merge() method.
x <- merge(spc, ibm)
plot(x, main = "IBM vs S&P 500")
?get.hist.quote
GetFinancialTimeSeries()
source('D:/Subversion/PUB/dbt/TimeSeries/R/GetFinancialTimeSeries.R')
source('D:/Subversion/PUB/dbt/TimeSeries/R/GetFinancialTimeSeries.R')
GetFinancialTimeSeries()
source('D:/Subversion/PUB/dbt/TimeSeries/R/GetFinancialTimeSeries.R')
GetFinancialTimeSeries()
po.test(Data)
?po.test
?TSAT::CointegrationOfTwoTS
?DiffFilter
?po.test
GrangerCausalityTest(Data[,2],Data[,1])
GrangerCausalityTest(Data[,3],Data[,1])
library(MASS)
GrangerCausalityTest(Data[,2],Data[,1])
GrangerCausalityTest(Data[,3],Data[,1])
?glm
source('D:/Subversion/PUB/dbt/TimeSeries/R/GeneralizedLinearModels4TS.R')
source('D:/Subversion/PUB/dbt/TimeSeries/R/GeneralizedLinearModels4TS.R')
source('D:/Subversion/PUB/dbt/TimeSeries/R/autoCompoundModel.R')
updateDBT()
updateDBT()
