{
    "collab_server" : "",
    "contents" : "EventCountsPerTime=function(BeginningTime,Resolution='months',PlotIt=TRUE,format=c('y-m-d','h:m:s'),split=\" \"){\n# EventCountsPerTime(BeginningTime,Resolution='days',PlotIt=T,format=c('y-m-d','h:m:s'),split=\" \")\n#Counts the Events defined by the beginning (middle or end) time of the event in a resolution window of time\n#Input\n#BeginningTime[1:n] character of time from years to seconds will be translated to chon object or chron object or chron object\n#Resolution string Option: seconds, minutes, days,hours,weekdays,months,quarters or years\n#PlotIt     default(True) plots histogram\n#format     format of Time as vector of years to days and hours to seconds\n#split      character vector (or object which can be coerced to such) containing regular expression(s) (unless fixed = TRUE) to use for splitting.\n#OUTPUT\n# Data[1:n,2] Time of Resultation ind columns 1 and Counts in Columns 2\n#author: MT 2017\n  requireNamespace('chron')\n  if(!is.character(Resolution)){\n    stop('Resolution has to be character.')\n  }\n  if(missing(BeginningTime)){\n    stop('BeginningTime is missing')\n  }\n  if(is.list(BeginningTime)){\n    warning('BeginningTime is a list, Trying to unlist.')\n    BeginningTime=unlist(BeginningTime)\n  }\n  \n  if(!inherits(BeginningTime,'chron')){\n    if(inherits(BeginningTime, \"POSIXlt\")|inherits(BeginningTime, \"POSIXct\")){\n      warning('BeginningTime is either POSIXlt or POSIXct object. Trying to transform to character')\n      BeginningTime=as.character(BeginningTime)\n    }\n    if(!mode(BeginningTime)==\"character\"){\n      warning('BeginningTime is neither character or chron object. Trying to transform to character')\n      BeginningTime=as.character(BeginningTime)\n    }\n    indt1=which(BeginningTime=='NaN')\n    if(length(indt1)>0)\n      BeginningTime=BeginningTime[-indt1]\n    indt2=which(BeginningTime=='NA')\n    if(length(indt2)>0)\n      BeginningTime=BeginningTime[-indt2]\n    \n    dates=sapply(strsplit(BeginningTime, split), \"[[\", 1)\n    daytimes=sapply(strsplit(BeginningTime, split), \"[[\", 2)\n    y=chron::chron(dates=dates,times=daytimes,format=format)\n  }else{\n    y=BeginningTime\n  }\n  switch(Resolution,\n         minutes={z=as.numeric(chron::minutes(y))\n         names=sort(unique(z),na.last = T,decreasing = F)\n         },\n         seconds={z=as.numeric(chron::seconds(y))\n         names=sort(unique(z),na.last = T,decreasing = F)\n         },\n         \n         days={z=as.numeric(chron::days(y))\n         names=sort(unique(z),na.last = T,decreasing = F)\n         },\n         hours={z=chron::hours(y)\n         names=sort(unique(z),na.last = T,decreasing = F)\n         },\n         weekdays={ztemp=weekdays(y, abbreviate = TRUE)\n         z=rep(NaN,length(ztemp))\n         z[ztemp=='Mon']=1\n         z[ztemp=='Tue']=2\n         z[ztemp=='Wed']=3\n         z[ztemp=='Thu']=4\n         z[ztemp=='Fri']=5\n         z[ztemp=='Sat']=6\n         z[ztemp=='Sun']=7\n         names=levels(weekdays(y, abbreviate = FALSE))\n         names=names[c(2:7,1)]\n         },\n         months={z=as.numeric(months(y, abbreviate = TRUE))\n         names=sort(unique(z),na.last = T,decreasing = F)\n         },\n         quarters={ztemp=quarters(y, abbreviate = FALSE)\n         z=rep(NaN,length(ztemp))\n         z[ztemp=='I']=1\n         z[ztemp=='II']=2\n         z[ztemp=='III']=3\n         z[ztemp=='IV']=4\n         names=levels(quarters(y, abbreviate = FALSE))\n         },\n         years={ztemp=chron::years(y)\n         ind=as.numeric(levels(chron::years(y)))\n         z=rep(NaN,length(ztemp))\n         for(i in 1:length(ind)){\n           z[ztemp==ind[i]]=i\n         }\n         names=ind  \n         },\n         stop(\"Wrong Resolution string entered\")\n         \n  )\n  Data=EventCounts(z,PlotIt=PlotIt,main=\"Histogram of Time Events\",xlab=Resolution)\n  #Breaks <- sort(unique(z),na.last = T,decreasing = F)\n  # Breaks=1:max(unique(z),na.rm = T)\n  # Counts=c()\n  # print(Breaks)\n  # for(i in 1:max(Breaks)) Counts=c(Counts,sum(z==Breaks[i],na.rm = T))\n  # Breaks=1:max(Breaks)\n  # names=as.character(Breaks)\n  # print(Counts)\n  # nB <- length(Breaks)\n  # y <- Counts\n  # Title = \"Histogram of Time of Data\"\n  # xlab=Resolution\n  # ylab='Frequencies'\n  # if (PlotIt){\n  #   plot(x = c(min(z, na.rm = TRUE)-0.5, max(z, na.rm = TRUE)+0.5), \n  #        y = c(0, max(Counts, na.rm = TRUE) * 1.2), type = \"n\", \n  #        main = Title, xaxs = \"i\", yaxs = \"i\", axes = FALSE, \n  #        xlab = xlab, ylab = ylab, xlim = c(min(z, na.rm = TRUE)-0.5, \n  #                                           max(z, na.rm = TRUE)+0.5), ylim = c(0, max(Counts, \n  #                                                                                      na.rm = TRUE) * 1.2))\n  #   par(mgp = c(2.2, 0.6, 0))\n  #   rect(Breaks-0.5, 0, Breaks+0.5, y, col = \"blue\", border = \"light blue\", \n  #        xlab = \"\", ylab = ylab, xlim = c(min(z, na.rm = TRUE)-0.5, \n  #                                         max(z, na.rm = TRUE)+0.5), ylim = c(0, max(Counts, \n  #                                                                                    na.rm = TRUE) * 1.2))\n  #   axis(1, col = \"black\", las = 1, xaxs = \"i\",at=Breaks,labels = names)\n  #   axis(2, col = \"black\", las = 1, yaxs = \"i\")\n  # }\n  # Data=cbind(Breaks,y)\n  # colnames(Data)=c(Resolution,'Counts')\n  return(Data)\n  ###\n}",
    "created" : 1511866274860.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2269133879",
    "id" : "BCF43E43",
    "lastKnownWriteTime" : 1511971783,
    "last_content_update" : 1511971783754,
    "path" : "D:/Subversion/PUB/dbt/TimeSeries/R/EventCountsPerTime.R",
    "project_path" : "R/EventCountsPerTime.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}