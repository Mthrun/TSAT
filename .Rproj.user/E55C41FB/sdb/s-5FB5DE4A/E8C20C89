{
    "collab_server" : "",
    "contents" : "EventCounts=function(Events,PlotIt=FALSE,main=\"Histogram of Events\",xlab='Event Names'){\n#EventCounts(Events,PlotIt=FALSE,main=\"Histogram of Events\",xlab='Event names')\n# INPUT\n# Events [1:n] vector of events to be counted, character or numerical\n# PlotIt TRUE (default): Plots histogram\n# main #title of plot\n# xlab  #xlabel of pÃ¶ot\n# Output\n# Data[1:k,1:3] k breaks of (k different events) with counts as second column and event names as third column \n#author: MT 12/2017\nz=Events\nCounts=c()\nif(is.numeric(z)){\n\n  Breaks=1:max(unique(z),na.rm = T)\n  Breaks2=Breaks\n  for(i in 1:max(Breaks)){\n    tempvr=sum(z==Breaks[i],na.rm = T)\n     #if(tempvr>0)#{\n      Counts=c(Counts,tempvr)\n    # }else{\n    #   Breaks2=Breaks2[-i]\n    # }\n    tempvr=c()\n  } \n  # Breaks=Breaks2\n  ind=which(Counts!=0)\n  Counts=Counts[ind]\n  names=as.character(Breaks[ind])\n  Breaks=1:length(Breaks[ind])\n\n  MiN=1#min(z, na.rm = TRUE)\n  MaX=length(Breaks[ind])#max(z, na.rm = TRUE)\n\n}else{\n  MiN=1\n  x=sort(unique(z))\n  MaX=length(x)\n  Breaks=1:length(x)\n  \n  for(i in 1:max(Breaks)) {\n     tempvr=sum(z==x[i],na.rm = T)\n    # if(tempvr>0){\n       Counts=c(Counts,tempvr)\n    # }else{\n    #   x=x[-i]\n    #   Breaks=Breaks[-i]\n    # }\n\n  }\n  names=x\n}\n\nind=order(Counts,decreasing = T,na.last = T)\nCounts=Counts[ind]\nnames=names[ind]\n\nif(PlotIt)\n  PlotEventCounts(Counts,Names=names,main=main,xlab=xlab)\n\nData=cbind(Breaks,Counts,names)\ncolnames(Data)=c('Breaks','Counts','Names')\nreturn(Data)\n}",
    "created" : 1511970638652.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "908989976",
    "id" : "E8C20C89",
    "lastKnownWriteTime" : 1512053475,
    "last_content_update" : 1512053475154,
    "path" : "D:/Subversion/PUB/dbt/TimeSeries/R/EventCounts.R",
    "project_path" : "R/EventCounts.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}